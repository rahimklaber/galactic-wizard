"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitSchemaIdentifier = exports.qualifiySchemaIdentifier = exports.quoteAndUnqualifyIdentifier = exports.unqualifyIdentifier = exports.quoteIdentifier = exports.quoteIdentifiers = exports.backtickQuoteSimpleIdentifier = exports.quoteSimpleIdentifier = void 0;
const SqlDatabase_1 = require("../core/SqlDatabase");
// -----------------------------------------------------------------
function quoteSimpleIdentifier(name) {
    return '"' + name.replace(/\"/g, '""') + '"';
}
exports.quoteSimpleIdentifier = quoteSimpleIdentifier;
function backtickQuoteSimpleIdentifier(name) {
    return '`' + name.replace(/\`/g, '``') + '`';
}
exports.backtickQuoteSimpleIdentifier = backtickQuoteSimpleIdentifier;
// -----------------------------------------------------------------
function quoteIdentifiers(name) {
    return name.split('.').map((value) => quoteSimpleIdentifier(value));
}
exports.quoteIdentifiers = quoteIdentifiers;
function quoteIdentifier(name) {
    return quoteIdentifiers(name).join('.');
}
exports.quoteIdentifier = quoteIdentifier;
// -----------------------------------------------------------------
function unqualifyIdentifier(name) {
    return name.split('.').pop();
}
exports.unqualifyIdentifier = unqualifyIdentifier;
function quoteAndUnqualifyIdentifier(name) {
    return quoteSimpleIdentifier(unqualifyIdentifier(name));
}
exports.quoteAndUnqualifyIdentifier = quoteAndUnqualifyIdentifier;
// -----------------------------------------------------------------
function qualifiySchemaIdentifier(name, schema) {
    if (name.indexOf('.') !== -1) {
        /* istanbul ignore if */
        if (schema && name.split('.').shift() !== schema) {
            throw new Error(`failed to qualify '${name}' by '${schema}`);
        }
        return name;
    }
    schema = schema || SqlDatabase_1.SQL_DEFAULT_SCHEMA;
    return `${schema}.${name}`;
}
exports.qualifiySchemaIdentifier = qualifiySchemaIdentifier;
function splitSchemaIdentifier(name) {
    const identifiers = name.split('.');
    if (identifiers.length >= 2) {
        return { identSchema: identifiers.shift(), identName: identifiers.join('.') };
    }
    else {
        return { identName: identifiers[0] };
    }
}
exports.splitSchemaIdentifier = splitSchemaIdentifier;
//# sourceMappingURL=identifiers.js.map