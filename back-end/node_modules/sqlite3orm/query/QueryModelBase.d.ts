import { MetaModel, MetaProperty, Table } from '../metadata';
export declare const TABLEALIAS = "T";
export declare class QueryModelBase<T> {
    readonly type: {
        new (): T;
    };
    readonly metaModel: MetaModel;
    readonly table: Table;
    constructor(type: {
        new (): T;
    });
    /**
     * Get 'SELECT ALL'-statement
     *
     * @returns The sql-statement
     */
    getSelectAllStatement<K extends keyof T>(keys?: K[], tableAlias?: string): string;
    /**
     * Get 'SELECT BY PRIMARY KEY'-statement
     *
     * @returns The sql-statement
     */
    getSelectByIdStatement<K extends keyof T>(keys?: K[], tableAlias?: string): string;
    /**
     * Get 'UPDATE ALL' statement
     *
     * @returns The sql-statement
     */
    getUpdateAllStatement<K extends keyof T>(keys?: K[]): string;
    /**
     * Get 'UPDATE BY PRIMARY KEY' statement
     *
     * @returns The sql-statement
     */
    getUpdateByIdStatement<K extends keyof T>(keys?: K[]): string;
    /**
     * Get 'DELETE ALL'-statement
     *
     * @returns The sql-statement
     */
    getDeleteAllStatement(): string;
    /**
     * Get 'DELETE BY PRIMARY KEY'-statement
     *
     * @returns The sql-statement
     */
    getDeleteByIdStatement(): string;
    /**
     * Get 'INSERT INTO'-statement
     *
     * @returns The sql-statement
     */
    getInsertIntoStatement<K extends keyof T>(keys?: K[]): string;
    /**
     * Get 'REPLACE INTO'-statement
     *
     * @returns The sql-statement
     */
    getInsertOrReplaceStatement<K extends keyof T>(keys?: K[]): string;
    /**
     * Get a select-condition for a foreign key constraint
     *
     * @param constraintName - The constraint name
     * @returns The partial where-clause
     */
    getForeignKeyPredicates(constraintName: string): string[] | undefined;
    /**
     * Get the foreign key (child) properties for a foreign key constraint
     *
     * @param constraintName - The constraint name
     * @returns The properties holding the foreign key
     */
    getForeignKeyProps(constraintName: string): MetaProperty[] | undefined;
    /**
     * Get the reference (parent) columns for a foreign key constraint
     *
     * @param constraintName - The constraint name
     * @returns The referenced column names
     */
    getForeignKeyRefCols(constraintName: string): string[] | undefined;
    getPropertiesFromKeys(keys?: (keyof T)[], addIdentity?: boolean): MetaProperty[];
    getPropertiesFromColumnNames(cols: string[], notFoundCols?: string[]): MetaProperty[] | undefined;
    setHostParam(hostParams: any, prop: MetaProperty, model: Partial<T>): void;
    setHostParamValue(hostParams: any, prop: MetaProperty, value: any): void;
    updateModelFromRow(model: T, row: any): T;
    getPartialFromRow(row: any): Partial<T>;
    bindForeignParams<F extends Object>(foreignQueryModel: QueryModelBase<F>, constraintName: string, foreignObject: F, more?: Object): Object;
    bindAllInputParams(model: Partial<T>, keys?: (keyof T)[], addIdentity?: boolean): Object;
    bindNonPrimaryKeyInputParams(model: Partial<T>, keys?: (keyof T)[]): Object;
    bindPrimaryKeyInputParams(model: Partial<T>): Object;
    private buildCache;
}
export interface QueryModelCache {
    primaryKeyProps: MetaProperty[];
    primaryKeyPredicates: string[];
    foreignKeyPredicates: Map<string, string[]>;
    foreignKeyProps: Map<string, MetaProperty[]>;
    foreignKeyRefCols: Map<string, string[]>;
}
