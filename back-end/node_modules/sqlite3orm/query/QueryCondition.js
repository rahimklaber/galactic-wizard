"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryCondition = void 0;
const QueryModelPredicates_1 = require("./QueryModelPredicates");
const Where_1 = require("./Where");
class QueryCondition {
    constructor(cond) {
        this.subOperations = [];
        this.sql = '';
        const keys = Object.keys(cond);
        /* istanbul ignore if */
        if (keys.length !== 1) {
            throw new Error(`unknown operation: ${keys.toString()}`);
        }
        const key = keys[0];
        /* istanbul ignore if */
        if (key !== 'not' && key !== 'and' && key !== 'or' && key !== 'sql') {
            throw new Error(`unknown operation: '${key}'`);
        }
        this.op = key;
        if (this.op === 'sql') {
            this.sql = cond[key];
        }
        else if (this.op === 'not') {
            const value = cond[key];
            if (Where_1.isModelPredicates(value)) {
                this.subOperations.push(new QueryModelPredicates_1.QueryModelPredicates(value));
            }
            else {
                this.subOperations.push(new QueryCondition(value));
            }
        }
        else {
            const value = cond[key];
            value.forEach((item) => {
                if (Where_1.isModelPredicates(item)) {
                    this.subOperations.push(new QueryModelPredicates_1.QueryModelPredicates(item));
                }
                else {
                    this.subOperations.push(new QueryCondition(item));
                }
            });
        }
    }
    toSql(metaModel, params, tablePrefix) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.op === 'sql') {
                return this.sql;
            }
            const parts = [];
            for (const subOperation of this.subOperations) {
                const part = yield subOperation.toSql(metaModel, params, tablePrefix);
                if (part.length) {
                    parts.push(part);
                }
            }
            if (!parts.length) {
                return '';
            }
            switch (this.op) {
                case 'not':
                    return `not (${parts[0]})`;
                case 'and':
                    return '(' + parts.join(') and (') + ')';
                case 'or':
                    return '(' + parts.join(') or (') + ')';
            }
        });
    }
}
exports.QueryCondition = QueryCondition;
//# sourceMappingURL=QueryCondition.js.map