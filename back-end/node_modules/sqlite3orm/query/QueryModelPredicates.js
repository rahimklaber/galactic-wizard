"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryModelPredicates = void 0;
const QueryPropertyPredicate_1 = require("./QueryPropertyPredicate");
const Where_1 = require("./Where");
class QueryModelPredicates {
    constructor(pred) {
        this.subOperations = [];
        const keys = Object.keys(pred);
        keys.forEach((propertyKey) => {
            const propertyPredicates = Where_1.getPropertyPredicates(pred, propertyKey);
            if (typeof propertyPredicates !== 'object' ||
                propertyPredicates instanceof Date ||
                propertyPredicates instanceof Promise) {
                // shorthand form for 'eq' comparison
                this.subOperations.push(new QueryPropertyPredicate_1.QueryPropertyPredicate(propertyKey, 'eq', propertyPredicates));
            }
            else {
                const comparisonKeys = Object.keys(propertyPredicates);
                comparisonKeys.forEach((comparisonOp) => {
                    const comparison = Where_1.getPropertyComparison(propertyPredicates, comparisonOp);
                    this.subOperations.push(new QueryPropertyPredicate_1.QueryPropertyPredicate(propertyKey, comparisonOp, comparison));
                });
            }
        });
    }
    toSql(metaModel, params, tablePrefix) {
        return __awaiter(this, void 0, void 0, function* () {
            const parts = [];
            for (const predicate of this.subOperations) {
                const part = yield predicate.toSql(metaModel, params, tablePrefix);
                /* istanbul ignore else */
                if (part.length) {
                    parts.push(part);
                }
            }
            if (!parts.length) {
                return '';
            }
            return parts.join(' and ');
        });
    }
}
exports.QueryModelPredicates = QueryModelPredicates;
//# sourceMappingURL=QueryModelPredicates.js.map