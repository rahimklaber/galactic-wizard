import { FieldOpts } from './decorators';
import { Field } from './Field';
import { FKDefinition } from './FKDefinition';
import { IDXDefinition } from './IDXDefinition';
import { MetaModel } from './MetaModel';
import { PropertyType } from './PropertyType';
/**
 * Class holding a table definition (name of the table and fields in the table)
 *
 * @export
 * @class Table
 */
export declare class Table {
    readonly name: string;
    get quotedName(): string;
    get schemaName(): string | undefined;
    /**
     * Flag to indicate if this table should be created with the 'WITHOUT
     * ROWID'-clause
     */
    private _withoutRowId?;
    get withoutRowId(): boolean;
    set withoutRowId(withoutRowId: boolean);
    get isWithoutRowIdDefined(): boolean;
    /**
     * Flag to indicate if AUTOINCREMENT should be enabled for a table having a
     * single-column INTEGER primary key
     * and withoutRowId is disabled
     */
    private _autoIncrement?;
    get autoIncrement(): boolean;
    set autoIncrement(autoIncrement: boolean);
    get isAutoIncrementDefined(): boolean;
    /**
     * The fields defined for this table
     */
    readonly fields: Field[];
    /**
     * The field mapped to the primary key; only set if using the
     * primary key column is alias for the rowId.
     */
    private _rowIdField;
    get rowIdField(): Field | undefined;
    /**
     * The field mapped to the primary key; only set if using the
     * AUTOINCREMENT feature
     */
    private _autoIncrementField;
    get autoIncrementField(): Field | undefined;
    readonly mapNameToField: Map<string, Field>;
    readonly mapNameToIdentityField: Map<string, Field>;
    readonly mapNameToFKDef: Map<string, FKDefinition>;
    readonly mapNameToIDXDef: Map<string, IDXDefinition>;
    readonly models: Set<MetaModel>;
    /**
     * Creates an instance of Table.
     *
     * @param name - The table name (containing the schema name if specified)
     */
    constructor(name: string);
    /**
     * Test if table has a column with the given column name
     *
     * @param colName - The name of the column
     */
    hasTableField(name: string): Field | undefined;
    /**
     * Get the field definition for the given column name
     *
     * @param colName - The name of the column
     * @returns The field definition
     */
    getTableField(name: string): Field;
    /**
     * Add a table field to this table
     *
     * @param name - The name of the column
     * @param isIdentity
     * @param [opts]
     * @param [propertyType]
     * @returns The field definition
     */
    getOrAddTableField(name: string, isIdentity: boolean, opts?: FieldOpts, propertyType?: PropertyType): Field;
    hasFKDefinition(name: string): FKDefinition | undefined;
    getFKDefinition(name: string): FKDefinition;
    addFKDefinition(fkDef: FKDefinition): FKDefinition;
    hasIDXDefinition(name: string): IDXDefinition | undefined;
    getIDXDefinition(name: string): IDXDefinition;
    addIDXDefinition(idxDef: IDXDefinition): IDXDefinition;
    /**
     * Get 'CREATE TABLE'-statement using 'IF NOT EXISTS'-clause
     *
     * @returns The sql-statement
     */
    getCreateTableStatement(force?: boolean): string;
    /**
     * Get 'DROP TABLE'-statement
     *
     * @returns {string}
     */
    getDropTableStatement(): string;
    /**
     * Get 'ALTER TABLE...ADD COLUMN'-statement for the given column
     *
     * @param colName - The name of the column to add to the table
     * @returns The sql-statment
     */
    getAlterTableAddColumnStatement(colName: string): string;
    /**
     * Get 'CREATE [UNIQUE] INDEX'-statement using 'IF NOT EXISTS'-clause
     *
     * @returns The sql-statement
     */
    getCreateIndexStatement(idxName: string, unique?: boolean): string;
    /**
     * Get 'DROP TABLE'-statement
     *
     * @returns The sql-statement
     */
    getDropIndexStatement(idxName: string): string;
    /**
     * Generate SQL Statements
     *
     */
    createCreateTableStatement(force?: boolean, addFields?: Field[]): string;
}
