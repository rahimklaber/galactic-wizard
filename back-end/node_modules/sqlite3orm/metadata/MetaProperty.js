"use strict";
// import * as core from './core';
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetaProperty = void 0;
const DefaultValueTransformers_1 = require("./DefaultValueTransformers");
const PropertyType_1 = require("./PropertyType");
class MetaProperty {
    constructor(className, key) {
        this.className = className;
        this.key = key;
        this._propertyType = PropertyType_1.PropertyType.UNKNOWN;
    }
    get propertyType() {
        return this._propertyType;
    }
    get field() {
        /* istanbul ignore else */
        if (this._field) {
            return this._field;
        }
        /* istanbul ignore next */
        throw new Error(`meta model property '${this.className}.${this.key.toString()}' not fully initialized yet`);
    }
    get transform() {
        return this._transform;
    }
    // called from decorator
    setPropertyType(propertyType) {
        let typeName;
        /* istanbul ignore else */
        if (typeof propertyType === 'function') {
            typeName = propertyType.name.toLowerCase();
        }
        else {
            typeName = propertyType.toLowerCase();
        }
        switch (typeName) {
            case 'boolean':
                this._propertyType = PropertyType_1.PropertyType.BOOLEAN;
                break;
            case 'string':
                this._propertyType = PropertyType_1.PropertyType.STRING;
                break;
            case 'number':
                this._propertyType = PropertyType_1.PropertyType.NUMBER;
                break;
            case 'date':
                this._propertyType = PropertyType_1.PropertyType.DATE;
                break;
            default:
                this._propertyType = PropertyType_1.PropertyType.UNKNOWN;
                break;
        }
    }
    valueToDB(value) {
        return this._transform.toDB(value);
    }
    getDBValueFromModel(model) {
        return this._transform.toDB(Reflect.get(model, this.key));
    }
    setDBValueIntoModel(model, value) {
        Reflect.set(model, this.key, this._transform.fromDB(value));
    }
    /**
     * Get the name for the corresponding host parameter
     *
     * @returns {string}
     */
    getHostParameterName(prefix) {
        prefix = prefix || '';
        return `:${prefix}${this.key.toString()}`;
    }
    init(model, name, isIdentity, opts) {
        try {
            this._field = model.table.getOrAddTableField(name, isIdentity, opts, this.propertyType);
        }
        catch (err) {
            throw new Error(`property '${this.className}.${this.key.toString()}': failed to add field: ${err.message}`);
        }
        // add mapping from column name to this property
        model.mapColNameToProp.set(this._field.name, this);
        // init transform
        const typeAffinity = this.field.dbTypeInfo.typeAffinity;
        if (opts.transform) {
            this._transform = opts.transform;
        }
        else {
            if (this.field.isJson) {
                this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.json;
            }
            else {
                switch (this.propertyType) {
                    /* BOOLEAN */
                    case PropertyType_1.PropertyType.BOOLEAN:
                        if (typeAffinity === 'TEXT') {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.booleanText;
                        }
                        else {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.booleanNumber;
                        }
                        break;
                    case PropertyType_1.PropertyType.DATE:
                        if (typeAffinity === 'TEXT') {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.dateText;
                        }
                        else {
                            if (this._field.dateInMilliSeconds) {
                                this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.dateIntegerAsMilliseconds;
                            }
                            else {
                                this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.dateIntegerAsSeconds;
                            }
                        }
                        break;
                    case PropertyType_1.PropertyType.NUMBER:
                        if (typeAffinity === 'TEXT') {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.numberText;
                        }
                        else {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.numberDefault;
                        }
                        break;
                    case PropertyType_1.PropertyType.STRING:
                        if (typeAffinity === 'TEXT') {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.stringDefault;
                        }
                        else {
                            this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.stringNumber;
                        }
                        break;
                    default:
                        this._transform = DefaultValueTransformers_1.DEFAULT_VALUE_TRANSFORMERS.unknownDefault;
                        break;
                }
            }
        }
    }
}
exports.MetaProperty = MetaProperty;
//# sourceMappingURL=MetaProperty.js.map