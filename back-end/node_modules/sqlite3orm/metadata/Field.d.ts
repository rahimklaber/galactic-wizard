import { DbColumnTypeInfo } from '../dbcatalog';
import { PropertyType } from './PropertyType';
import { FieldOpts } from './decorators';
/**
 * Class holding a field definition
 *
 * @export
 * @class Field
 */
export declare class Field {
    /**
     * The name of the column
     */
    name: string;
    /**
     * The quoted field name
     */
    get quotedName(): string;
    private _dbDefaultType;
    get dbDefaultType(): string;
    set dbDefaultType(dbType: string);
    /**
     * The type of the table column
     */
    private _dbtype?;
    private _dbTypeInfo;
    get dbtype(): string;
    set dbtype(dbType: string);
    get isDbTypeDefined(): boolean;
    get dbTypeInfo(): DbColumnTypeInfo;
    /**
     * If this property should be serialized/deserialized to the database as Json data
     */
    private _isJson?;
    get isJson(): boolean;
    set isJson(isJson: boolean);
    get isIsJsonDefined(): boolean;
    private _dateInMilliSeconds?;
    get dateInMilliSeconds(): boolean;
    set dateInMilliSeconds(val: boolean);
    get isDateInMilliSecondsDefined(): boolean;
    /**
     * Flag if this field is part of the primary key
     */
    isIdentity: boolean;
    /**
     * Creates an instance of Field.
     *
     */
    constructor(name: string, isIdentity?: boolean, opts?: FieldOpts, propertyType?: PropertyType);
    setDbDefaultType(propertyType?: PropertyType, opts?: FieldOpts): void;
    static parseDbType(dbtype: string): DbColumnTypeInfo;
}
