import { MetaProperty } from './MetaProperty';
import { TableOpts, FieldOpts } from './decorators';
import { Table } from './Table';
import { QueryModelCache } from '../query/QueryModelBase';
export declare type KeyType = string | number | symbol;
export declare class MetaModel {
    readonly name: string;
    readonly properties: Map<KeyType, MetaProperty>;
    readonly mapColNameToProp: Map<string, MetaProperty>;
    private _table?;
    get table(): Table;
    private opts;
    qmCache: QueryModelCache;
    constructor(name: string);
    hasProperty(key: KeyType): MetaProperty | undefined;
    getProperty(key: KeyType): MetaProperty;
    getOrAddProperty(key: KeyType): MetaProperty;
    setPropertyField(key: KeyType, isIdentity: boolean, opts: FieldOpts): void;
    setPropertyForeignKey(key: KeyType, constraintName: string, foreignTableName: string, foreignTableField: string): void;
    setPropertyIndexKey(key: KeyType, indexName: string, isUnique?: boolean, desc?: boolean): void;
    init(tableOpts: TableOpts): void;
    destroy(): void;
}
