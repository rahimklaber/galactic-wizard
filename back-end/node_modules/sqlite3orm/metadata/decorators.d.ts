import 'reflect-metadata';
import { MetaModel, KeyType } from './MetaModel';
import { ValueTransformer } from './ValueTransformer';
export declare const METADATA_MODEL_KEY = "sqlite3orm:model";
/**
 * Options for the '@table' class decorator
 *
 * @export
 * @interface TableOpts
 */
export interface TableOpts {
    /**
     * [name] - The name of the table
     */
    name?: string;
    /**
     * [withoutRowId] - Flag to indicate if table should be created using the 'WITHOUT ROWID'
     * clause
     */
    withoutRowId?: boolean;
    /**
     * [autoIncrement] - Flag to indicate if AUTOINCREMENT should be added to single-column INTEGER
     * primary keys
     */
    autoIncrement?: boolean;
}
/**
 * Options for the property decorators '@field' and '@id'
 *
 * @export
 * @interface FieldOpts
 */
export interface FieldOpts {
    /**
     * [name] - The name of the table field
     */
    name?: string;
    /**
     * [dbtype] - The column definition
     */
    dbtype?: string;
    /**
     * [isJson] - Flag to indicate if field should be persisted as json string
     */
    isJson?: boolean;
    notNull?: boolean;
    dateInMilliSeconds?: boolean;
    /**
     * [transform] - serialize/deserialize functions
     */
    transform?: ValueTransformer;
}
/**
 * Get the model metadata
 *
 * @param target - The constructor of the class
 * @returns The meta model
 */
export declare function getModelMetadata(target: Function): MetaModel;
/*****************************************************************************************/
export declare function table(opts?: TableOpts): (target: Function) => void;
/**
 * The property decorator for mapping a table field to a class property
 *
 * @export
 * @param [name] - The name of the field; defaults to the property name
 * @param [dbtype] - The type of the field; defaults to 'TEXT'
 * @returns The decorator function
 */
export declare function field(opts?: FieldOpts): (target: Object, key: KeyType) => void;
/**
 * The id decorator for mapping a field of the primary key to a class property
 *
 * @export
 * @param [name] - The name of the field; defaults to the property name
 * @param [dbtype] - The type of the field; defaults to 'TEXT'
 * @returns The decorator function
 */
export declare function id(opts?: FieldOpts): (target: Object, key: KeyType) => void;
/**
 * The fk decorator for mapping a class property to be part of a foreign key
 * constraint
 *
 * @export
 * @param constraintName - The constraint name
 * @param foreignTableName - The referenced table name
 * @param foreignTableField - The referenced table field
 * @returns The decorator function
 */
export declare function fk(constraintName: string, foreignTableName: string, foreignTableField: string): (target: Object, key: KeyType) => void;
/**
 * The index decorator for mapping a class property to be part of an index
 *
 * @export
 * @param indexName - The index name
 * @param [isUnique] - index is unique
 * @param [desc] - descending order for this column
 * @returns The decorator function
 */
export declare function index(indexName: string, isUnique?: boolean, desc?: boolean): (target: Object, key: KeyType) => void;
